% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_qc.R
\name{filter_qc}
\alias{filter_qc}
\alias{filter_all_qc}
\alias{filter_at_qc}
\title{Report number of dropped cases when performing dplyr filter.}
\usage{
filter_qc(.data, ...)

filter_all_qc(.tbl, .vars_predicate)

filter_at_qc(.tbl, .vars, .vars_predicate)
}
\arguments{
\item{.data}{A tbl.}

\item{...}{Logical predicates defined in terms of the variables in `.data`.
Multiple conditions are combined with `&`. Only rows where the
conditon evalutes to `TRUE` are kept.}

\item{.vars_predicate}{A quoted predicate expression as returned by 
\code{\link[dplyr]{all_vars}} or \code{\link[dplyr]{any_vars}}.}

\item{.vars}{A list of columns generated by \code{\link[dplyr]{vars}}, or a 
character vector of column names, or a numeric vector of column positions.}
}
\value{
An object of the same class as \code{.data}. This object will be
  identical to that which is returned when running the standard 
  \code{dplyr::filter} function or its scoped variant.
}
\description{
\code{filter_qc}, \code{filter_all_qc}, and \code{filter_at_qc} return
  identical objects as \code{filter}, \code{filter_all}, and \code{filter_at} 
  respectively.
}
\details{
Each _qc version of the filter functions is identical to its dplyr equivalent
except that it automatically prints the number of cases (i.e., rows) that do
not meet the filter conditions and that were thus dropped.
}
\section{Scoped filtering}{

  Currently supports two \emph{scoped} variants (\code{filter_all_qc} and 
  \code{filter_at_qc}) which work identical to dplyr's \code{filter_all} and
  \code{filter_at} but print the number of dropped rows. These scoped
  variants make it easy to apply a filtering condition to a selection of
  variables. See corresponding dplyr filter help documentation for more 
  details on how to use any of the filter variants.
}

\examples{
practice_data <- data.frame(A = 1:10, B = 6:15, C = 8:17)

# Basic filtering
filter_qc(practice_data, A > 5)
filter_qc(practice_data, A > 5 & B > 8)
filter_qc(practice_data, A > 5 & B > 8)

# Scoped filtering
filter_all_qc(practice_data, all_vars(. > 9))
filter_at_qc(practice_data, vars(B, C), any_vars(. < 15))
}
\seealso{
\code{\link[dplyr]{filter}}, and \code{\link[dplyr]{filter_all}}
}
