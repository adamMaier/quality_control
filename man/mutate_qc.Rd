% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mutate_qc.R
\name{mutate_qc}
\alias{mutate_qc}
\alias{transmute_qc}
\title{Report number of NAs created when performing dplyr mutate}
\usage{
mutate_qc(.data, ...)

transmute_qc(.data, ...)
}
\arguments{
\item{.data}{A tbl.}

\item{...}{Name-value pairs of expressions. Use \code{NULL} to drop a 
variable.}
}
\value{
An object of the same class as \code{.data}. This object will be
  identical to that which is returned when running the standard 
  \code{dplyr::mutate} or \code{dplyr::transmute} functions.
}
\description{
\code{mutate_qc} and \code{transmute_qc} return identical objects as 
\code{mutate} and \code{transmute}. Like dplyr, \code{mutate_qc} adds new 
variables and preserves existing variables, and \code{transmute_qc} drops 
existing variables.
}
\details{
\code{mutate_qc} and \code{transmute_qc} are used exactly the same as 
\code{mutate} and \code{transmute} and require all of the same arguments
and return identical objects. The only difference is that the \code{_qc}
versions print a message indicating the number of NA values created in the
new or edited variable(s) after calling \code{mutate}.
}
\section{Scoped mutation and transmutation}{

  Currently there are not _qc versions of \code{mutate_at}, 
  \code{mutate_all}, or \code{mutate_if}, or the \code{transmute} 
  equivalents.
}

\examples{
practice_data <- data.frame(A = c(1:4, NA), B = c(NA, 7:10), C = 21:25)

mutate_qc(practice_data, new_var = A + B)

transmute_qc(
  practice_data,
  new_var_1 = A + B,
  new_var_2 = A - C
)
}
\seealso{
\code{\link[dplyr]{mutate}}
}
